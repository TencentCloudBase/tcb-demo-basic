{"version":3,"sources":["web-streams-adapter.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsAdapter = {}));\n}(this, (function (exports) { \n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n    /* global Reflect, Promise */\n\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n\n    function __extends(d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n\n    function assert(test) {\n        if (!test) {\n            throw new TypeError('Assertion failed');\n        }\n    }\n\n    function noop() {\n        return;\n    }\n    function typeIsObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n\n    function isStreamConstructor(ctor) {\n        if (typeof ctor !== 'function') {\n            return false;\n        }\n        var startCalled = false;\n        try {\n            new ctor({\n                start: function () {\n                    startCalled = true;\n                }\n            });\n        }\n        catch (e) {\n            // ignore\n        }\n        return startCalled;\n    }\n    function isReadableStream(readable) {\n        if (!typeIsObject(readable)) {\n            return false;\n        }\n        if (typeof readable.getReader !== 'function') {\n            return false;\n        }\n        return true;\n    }\n    function isReadableStreamConstructor(ctor) {\n        if (!isStreamConstructor(ctor)) {\n            return false;\n        }\n        if (!isReadableStream(new ctor())) {\n            return false;\n        }\n        return true;\n    }\n    function isWritableStream(writable) {\n        if (!typeIsObject(writable)) {\n            return false;\n        }\n        if (typeof writable.getWriter !== 'function') {\n            return false;\n        }\n        return true;\n    }\n    function isWritableStreamConstructor(ctor) {\n        if (!isStreamConstructor(ctor)) {\n            return false;\n        }\n        if (!isWritableStream(new ctor())) {\n            return false;\n        }\n        return true;\n    }\n    function isTransformStream(transform) {\n        if (!typeIsObject(transform)) {\n            return false;\n        }\n        if (!isReadableStream(transform.readable)) {\n            return false;\n        }\n        if (!isWritableStream(transform.writable)) {\n            return false;\n        }\n        return true;\n    }\n    function isTransformStreamConstructor(ctor) {\n        if (!isStreamConstructor(ctor)) {\n            return false;\n        }\n        if (!isTransformStream(new ctor())) {\n            return false;\n        }\n        return true;\n    }\n    function supportsByobReader(readable) {\n        try {\n            var reader = readable.getReader({ mode: 'byob' });\n            reader.releaseLock();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    function supportsByteSource(ctor) {\n        try {\n            new ctor({ type: 'bytes' });\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n\n    function createReadableStreamWrapper(ctor) {\n        assert(isReadableStreamConstructor(ctor));\n        var byteSourceSupported = supportsByteSource(ctor);\n        return function (readable, _a) {\n            var _b = _a === void 0 ? {} : _a, type = _b.type;\n            type = parseReadableType(type);\n            if (type === 'bytes' && !byteSourceSupported) {\n                type = undefined;\n            }\n            if (readable.constructor === ctor) {\n                if (type !== 'bytes' || supportsByobReader(readable)) {\n                    return readable;\n                }\n            }\n            if (type === 'bytes') {\n                var source = createWrappingReadableSource(readable, { type: type });\n                return new ctor(source);\n            }\n            else {\n                var source = createWrappingReadableSource(readable);\n                return new ctor(source);\n            }\n        };\n    }\n    function createWrappingReadableSource(readable, _a) {\n        var _b = _a === void 0 ? {} : _a, type = _b.type;\n        assert(isReadableStream(readable));\n        assert(readable.locked === false);\n        type = parseReadableType(type);\n        var source;\n        if (type === 'bytes') {\n            source = new WrappingReadableByteStreamSource(readable);\n        }\n        else {\n            source = new WrappingReadableStreamDefaultSource(readable);\n        }\n        return source;\n    }\n    function parseReadableType(type) {\n        var typeString = String(type);\n        if (typeString === 'bytes') {\n            return typeString;\n        }\n        else if (type === undefined) {\n            return type;\n        }\n        else {\n            throw new RangeError('Invalid type is specified');\n        }\n    }\n    var AbstractWrappingReadableStreamSource = /** @class */ (function () {\n        function AbstractWrappingReadableStreamSource(underlyingStream) {\n            this._underlyingReader = undefined;\n            this._readerMode = undefined;\n            this._readableStreamController = undefined;\n            this._pendingRead = undefined;\n            this._underlyingStream = underlyingStream;\n            // always keep a reader attached to detect close/error\n            this._attachDefaultReader();\n        }\n        AbstractWrappingReadableStreamSource.prototype.start = function (controller) {\n            this._readableStreamController = controller;\n        };\n        AbstractWrappingReadableStreamSource.prototype.cancel = function (reason) {\n            assert(this._underlyingReader !== undefined);\n            return this._underlyingReader.cancel(reason);\n        };\n        AbstractWrappingReadableStreamSource.prototype._attachDefaultReader = function () {\n            if (this._readerMode === \"default\" /* DEFAULT */) {\n                return;\n            }\n            this._detachReader();\n            var reader = this._underlyingStream.getReader();\n            this._readerMode = \"default\" /* DEFAULT */;\n            this._attachReader(reader);\n        };\n        AbstractWrappingReadableStreamSource.prototype._attachReader = function (reader) {\n            var _this = this;\n            assert(this._underlyingReader === undefined);\n            this._underlyingReader = reader;\n            var closed = this._underlyingReader.closed;\n            if (!closed) {\n                return;\n            }\n            closed\n                .then(function () { return _this._finishPendingRead(); })\n                .then(function () {\n                if (reader === _this._underlyingReader) {\n                    _this._readableStreamController.close();\n                }\n            }, function (reason) {\n                if (reader === _this._underlyingReader) {\n                    _this._readableStreamController.error(reason);\n                }\n            })\n                .catch(noop);\n        };\n        AbstractWrappingReadableStreamSource.prototype._detachReader = function () {\n            if (this._underlyingReader === undefined) {\n                return;\n            }\n            this._underlyingReader.releaseLock();\n            this._underlyingReader = undefined;\n            this._readerMode = undefined;\n        };\n        AbstractWrappingReadableStreamSource.prototype._pullWithDefaultReader = function () {\n            var _this = this;\n            this._attachDefaultReader();\n            // TODO Backpressure?\n            var read = this._underlyingReader.read()\n                .then(function (result) {\n                var controller = _this._readableStreamController;\n                if (result.done) {\n                    _this._tryClose();\n                }\n                else {\n                    controller.enqueue(result.value);\n                }\n            });\n            this._setPendingRead(read);\n            return read;\n        };\n        AbstractWrappingReadableStreamSource.prototype._tryClose = function () {\n            try {\n                this._readableStreamController.close();\n            }\n            catch (_a) {\n                // already errored or closed\n            }\n        };\n        AbstractWrappingReadableStreamSource.prototype._setPendingRead = function (readPromise) {\n            var _this = this;\n            var pendingRead;\n            var finishRead = function () {\n                if (_this._pendingRead === pendingRead) {\n                    _this._pendingRead = undefined;\n                }\n            };\n            this._pendingRead = pendingRead = readPromise.then(finishRead, finishRead);\n        };\n        AbstractWrappingReadableStreamSource.prototype._finishPendingRead = function () {\n            var _this = this;\n            if (!this._pendingRead) {\n                return undefined;\n            }\n            var afterRead = function () { return _this._finishPendingRead(); };\n            return this._pendingRead.then(afterRead, afterRead);\n        };\n        return AbstractWrappingReadableStreamSource;\n    }());\n    var WrappingReadableStreamDefaultSource = /** @class */ (function (_super) {\n        __extends(WrappingReadableStreamDefaultSource, _super);\n        function WrappingReadableStreamDefaultSource() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        WrappingReadableStreamDefaultSource.prototype.pull = function () {\n            return this._pullWithDefaultReader();\n        };\n        return WrappingReadableStreamDefaultSource;\n    }(AbstractWrappingReadableStreamSource));\n    function toUint8Array(view) {\n        return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n    }\n    function copyArrayBufferView(from, to) {\n        var fromArray = toUint8Array(from);\n        var toArray = toUint8Array(to);\n        toArray.set(fromArray, 0);\n    }\n    var WrappingReadableByteStreamSource = /** @class */ (function (_super) {\n        __extends(WrappingReadableByteStreamSource, _super);\n        function WrappingReadableByteStreamSource(underlyingStream) {\n            var _this = this;\n            var supportsByob = supportsByobReader(underlyingStream);\n            _this = _super.call(this, underlyingStream) || this;\n            _this._supportsByob = supportsByob;\n            return _this;\n        }\n        Object.defineProperty(WrappingReadableByteStreamSource.prototype, \"type\", {\n            get: function () {\n                return 'bytes';\n            },\n            enumerable: false,\n            configurable: true\n        });\n        WrappingReadableByteStreamSource.prototype._attachByobReader = function () {\n            if (this._readerMode === \"byob\" /* BYOB */) {\n                return;\n            }\n            assert(this._supportsByob);\n            this._detachReader();\n            var reader = this._underlyingStream.getReader({ mode: 'byob' });\n            this._readerMode = \"byob\" /* BYOB */;\n            this._attachReader(reader);\n        };\n        WrappingReadableByteStreamSource.prototype.pull = function () {\n            if (this._supportsByob) {\n                var byobRequest = this._readableStreamController.byobRequest;\n                if (byobRequest) {\n                    return this._pullWithByobRequest(byobRequest);\n                }\n            }\n            return this._pullWithDefaultReader();\n        };\n        WrappingReadableByteStreamSource.prototype._pullWithByobRequest = function (byobRequest) {\n            var _this = this;\n            this._attachByobReader();\n            // reader.read(view) detaches the input view, therefore we cannot pass byobRequest.view directly\n            // create a separate buffer to read into, then copy that to byobRequest.view\n            var buffer = new Uint8Array(byobRequest.view.byteLength);\n            // TODO Backpressure?\n            var read = this._underlyingReader.read(buffer)\n                .then(function (result) {\n                _this._readableStreamController;\n                if (result.done) {\n                    _this._tryClose();\n                    byobRequest.respond(0);\n                }\n                else {\n                    copyArrayBufferView(result.value, byobRequest.view);\n                    byobRequest.respond(result.value.byteLength);\n                }\n            });\n            this._setPendingRead(read);\n            return read;\n        };\n        return WrappingReadableByteStreamSource;\n    }(AbstractWrappingReadableStreamSource));\n\n    function createWritableStreamWrapper(ctor) {\n        assert(isWritableStreamConstructor(ctor));\n        return function (writable) {\n            if (writable.constructor === ctor) {\n                return writable;\n            }\n            var sink = createWrappingWritableSink(writable);\n            return new ctor(sink);\n        };\n    }\n    function createWrappingWritableSink(writable) {\n        assert(isWritableStream(writable));\n        assert(writable.locked === false);\n        var writer = writable.getWriter();\n        return new WrappingWritableStreamSink(writer);\n    }\n    var WrappingWritableStreamSink = /** @class */ (function () {\n        function WrappingWritableStreamSink(underlyingWriter) {\n            var _this = this;\n            this._writableStreamController = undefined;\n            this._pendingWrite = undefined;\n            this._state = \"writable\" /* WRITABLE */;\n            this._storedError = undefined;\n            this._underlyingWriter = underlyingWriter;\n            this._errorPromise = new Promise(function (resolve, reject) {\n                _this._errorPromiseReject = reject;\n            });\n            this._errorPromise.catch(noop);\n        }\n        WrappingWritableStreamSink.prototype.start = function (controller) {\n            var _this = this;\n            this._writableStreamController = controller;\n            this._underlyingWriter.closed\n                .then(function () {\n                _this._state = \"closed\" /* CLOSED */;\n            })\n                .catch(function (reason) { return _this._finishErroring(reason); });\n        };\n        WrappingWritableStreamSink.prototype.write = function (chunk) {\n            var _this = this;\n            var writer = this._underlyingWriter;\n            // Detect past errors\n            if (writer.desiredSize === null) {\n                return writer.ready;\n            }\n            var writeRequest = writer.write(chunk);\n            // Detect future errors\n            writeRequest.catch(function (reason) { return _this._finishErroring(reason); });\n            writer.ready.catch(function (reason) { return _this._startErroring(reason); });\n            // Reject write when errored\n            var write = Promise.race([writeRequest, this._errorPromise]);\n            this._setPendingWrite(write);\n            return write;\n        };\n        WrappingWritableStreamSink.prototype.close = function () {\n            var _this = this;\n            if (this._pendingWrite === undefined) {\n                return this._underlyingWriter.close();\n            }\n            return this._finishPendingWrite().then(function () { return _this.close(); });\n        };\n        WrappingWritableStreamSink.prototype.abort = function (reason) {\n            if (this._state === \"errored\" /* ERRORED */) {\n                return undefined;\n            }\n            var writer = this._underlyingWriter;\n            return writer.abort(reason);\n        };\n        WrappingWritableStreamSink.prototype._setPendingWrite = function (writePromise) {\n            var _this = this;\n            var pendingWrite;\n            var finishWrite = function () {\n                if (_this._pendingWrite === pendingWrite) {\n                    _this._pendingWrite = undefined;\n                }\n            };\n            this._pendingWrite = pendingWrite = writePromise.then(finishWrite, finishWrite);\n        };\n        WrappingWritableStreamSink.prototype._finishPendingWrite = function () {\n            var _this = this;\n            if (this._pendingWrite === undefined) {\n                return Promise.resolve();\n            }\n            var afterWrite = function () { return _this._finishPendingWrite(); };\n            return this._pendingWrite.then(afterWrite, afterWrite);\n        };\n        WrappingWritableStreamSink.prototype._startErroring = function (reason) {\n            var _this = this;\n            if (this._state === \"writable\" /* WRITABLE */) {\n                this._state = \"erroring\" /* ERRORING */;\n                this._storedError = reason;\n                var afterWrite = function () { return _this._finishErroring(reason); };\n                if (this._pendingWrite === undefined) {\n                    afterWrite();\n                }\n                else {\n                    this._finishPendingWrite().then(afterWrite, afterWrite);\n                }\n                this._writableStreamController.error(reason);\n            }\n        };\n        WrappingWritableStreamSink.prototype._finishErroring = function (reason) {\n            if (this._state === \"writable\" /* WRITABLE */) {\n                this._startErroring(reason);\n            }\n            if (this._state === \"erroring\" /* ERRORING */) {\n                this._state = \"errored\" /* ERRORED */;\n                this._errorPromiseReject(this._storedError);\n            }\n        };\n        return WrappingWritableStreamSink;\n    }());\n\n    function createTransformStreamWrapper(ctor) {\n        assert(isTransformStreamConstructor(ctor));\n        return function (transform) {\n            if (transform.constructor === ctor) {\n                return transform;\n            }\n            var transformer = createWrappingTransformer(transform);\n            return new ctor(transformer);\n        };\n    }\n    function createWrappingTransformer(transform) {\n        assert(isTransformStream(transform));\n        var readable = transform.readable, writable = transform.writable;\n        assert(readable.locked === false);\n        assert(writable.locked === false);\n        var reader = readable.getReader();\n        var writer;\n        try {\n            writer = writable.getWriter();\n        }\n        catch (e) {\n            reader.releaseLock(); // do not leak reader\n            throw e;\n        }\n        return new WrappingTransformStreamTransformer(reader, writer);\n    }\n    var WrappingTransformStreamTransformer = /** @class */ (function () {\n        function WrappingTransformStreamTransformer(reader, writer) {\n            var _this = this;\n            this._transformStreamController = undefined;\n            this._onRead = function (result) {\n                if (result.done) {\n                    return;\n                }\n                _this._transformStreamController.enqueue(result.value);\n                return _this._reader.read().then(_this._onRead);\n            };\n            this._onError = function (reason) {\n                _this._flushReject(reason);\n                _this._transformStreamController.error(reason);\n                _this._reader.cancel(reason).catch(noop);\n                _this._writer.abort(reason).catch(noop);\n            };\n            this._onTerminate = function () {\n                _this._flushResolve();\n                _this._transformStreamController.terminate();\n                var error = new TypeError('TransformStream terminated');\n                _this._writer.abort(error).catch(noop);\n            };\n            this._reader = reader;\n            this._writer = writer;\n            this._flushPromise = new Promise(function (resolve, reject) {\n                _this._flushResolve = resolve;\n                _this._flushReject = reject;\n            });\n        }\n        WrappingTransformStreamTransformer.prototype.start = function (controller) {\n            this._transformStreamController = controller;\n            this._reader.read()\n                .then(this._onRead)\n                .then(this._onTerminate, this._onError);\n            var readerClosed = this._reader.closed;\n            if (readerClosed) {\n                readerClosed\n                    .then(this._onTerminate, this._onError);\n            }\n        };\n        WrappingTransformStreamTransformer.prototype.transform = function (chunk) {\n            return this._writer.write(chunk);\n        };\n        WrappingTransformStreamTransformer.prototype.flush = function () {\n            var _this = this;\n            return this._writer.close()\n                .then(function () { return _this._flushPromise; });\n        };\n        return WrappingTransformStreamTransformer;\n    }());\n\n    exports.createReadableStreamWrapper = createReadableStreamWrapper;\n    exports.createTransformStreamWrapper = createTransformStreamWrapper;\n    exports.createWrappingReadableSource = createWrappingReadableSource;\n    exports.createWrappingTransformer = createWrappingTransformer;\n    exports.createWrappingWritableSink = createWrappingWritableSink;\n    exports.createWritableStreamWrapper = createWritableStreamWrapper;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=web-streams-adapter.js.map\n"]}